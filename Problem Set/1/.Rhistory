# Load necessary libraries
library(dplyr)
library(haven) # For reading modern Stata files
# Load data
claims <- read_dta("https://reifjulian.github.io/illinois-wellness-data/data/stata/claims.dta")
# Define "treatment" and "control" groups from the claims dataset
# (assuming treat column: 1 = treatment group, 0 = control group)
treatment_group <- filter(claims, treat == 1)
control_group <- filter(claims, treat == 0)
# Count the number of employees in each group
n_treatment <- nrow(treatment_group)
n_control <- nrow(control_group)
# Identify employees in the treatment group who participated in the initial (first-year) screening
# Assuming the claims dataset includes a column `completed_screening_nomiss_2016` indicating 2016 screening participation
initial_screening <- filter(claims, treat == 1 & !is.na(completed_screening_nomiss_2016) & completed_screening_nomiss_2016 == 1)
n_participants_initial_screening <- nrow(initial_screening)
# Define explanations for treatment, control, and participant
treatment_definition <- "Treatment group: employees offered the wellness program"
control_definition <- "Control group: employees not offered the wellness program"
participant_definition <- "Participant: treatment group employee who took part in initial screening"
# Print results with explanations
list(
treatment_definition = treatment_definition,
control_definition = control_definition,
participant_definition = participant_definition,
treatment_group_count = n_treatment,
control_group_count = n_control,
initial_screening_participants = n_participants_initial_screening
)
# Load necessary library
library(dplyr)
# Filter the claims dataset for pre-randomization outcomes before "0716"
pre_randomization_outcomes <- claims %>%
select(contains("0715"), contains("0716"))
# Define a function to calculate control and treatment group means and p-values for each variable
calculate_means_pvalues <- function(data, outcome_var) {
# Fit a linear regression model with 'treat' as the independent variable
model <- lm(as.formula(paste(outcome_var, "~ treat")), data = data)
# Extract control group mean (intercept), treatment group mean (intercept + treat coefficient), and p-value
control_mean <- coef(model)[1]  # Intercept, representing control group mean
treatment_mean <- coef(model)[1] + coef(model)[2]  # Control mean + treat coefficient, representing treatment group mean
p_value <- summary(model)$coefficients[2, 4]  # p-value for the 'treat' coefficient
# Return a named vector with the variable name, control mean, treatment mean, and p-value
return(c(variable = outcome_var, control_mean = control_mean,
treatment_mean = treatment_mean, p_value = p_value))
}
# Apply the function to each pre-randomization variable and store the results in a table
results <- as.data.frame(do.call(rbind, lapply(names(pre_randomization_outcomes), function(var) {
calculate_means_pvalues(claims, var)
})))
# Convert p-value column to numeric for further calculations
results$p_value <- as.numeric(results$p_value)
# Calculate the proportion of variables with p-values less than 0.05
proportion_significant <- mean(results$p_value < 0.05)
# Display the results table and the proportion of significant p-values
print(results)
cat("Proportion of variables with p-values < 0.05:", proportion_significant)
# Load necessary libraries
library(dplyr)
# Specify demographic controls
demographic_controls <- c("male", "white", "age37_49", "age50")
# Define function to calculate estimated difference with and without demographic controls
calculate_differences <- function(data, outcome_var) {
# Model without demographic controls
model_no_controls <- lm(as.formula(paste(outcome_var, "~ treat")), data = data)
est_diff_no_controls <- summary(model_no_controls)$coefficients["treat", 1]
se_no_controls <- summary(model_no_controls)$coefficients["treat", 2]
# Model with demographic controls
formula_with_controls <- as.formula(paste(outcome_var, "~ treat +", paste(demographic_controls, collapse = " + ")))
model_with_controls <- lm(formula_with_controls, data = data)
est_diff_with_controls <- summary(model_with_controls)$coefficients["treat", 1]
se_with_controls <- summary(model_with_controls)$coefficients["treat", 2]
# Calculate the absolute difference between estimates (optional, for analysis)
est_diff_difference <- abs(est_diff_no_controls - est_diff_with_controls)
# Return results for both models, formatted as required
return(c(
variable = outcome_var,
diff_no_controls = paste0(round(est_diff_no_controls, 4), " (", round(se_no_controls, 4), ")"),
diff_with_controls = paste0(round(est_diff_with_controls, 4), " (", round(se_with_controls, 4), ")"),
est_diff_difference = est_diff_difference  # For interpretation
))
}
# Filter for first-year post-randomization outcomes in claims dataset
first_year_outcomes <- claims %>%
select(starts_with("spend_0816_0717"), starts_with("covg_0816_0717"), starts_with("diabetes_0816_0717"),
starts_with("hyperlipidemia_0816_0717"), starts_with("hypertension_0816_0717"),
starts_with("pcp_any_office_0816_0717"), starts_with("pcp_total_visits_0816_0717"))
# Apply function to each outcome variable and compile results
results <- as.data.frame(do.call(rbind, lapply(names(first_year_outcomes), function(var) {
calculate_differences(claims, var)
})))
# Convert est_diff_difference to numeric for further analysis
results$est_diff_difference <- as.numeric(results$est_diff_difference)
# Display the results table and calculate the average difference between columns (2) and (3)
print(results)
cat("Average absolute difference between estimates with and without controls:", mean(results$est_diff_difference), "\n")
# Load necessary libraries
library(dplyr)
# Specify demographic controls
demographic_controls <- c("male", "white", "age37_49", "age50")
# Define a function to calculate estimated differences with and without demographic controls
calculate_differences <- function(data, outcome_var) {
# Model without demographic controls
model_no_controls <- lm(as.formula(paste(outcome_var, "~ treat")), data = data)
est_diff_no_controls <- summary(model_no_controls)$coefficients["treat", 1]
se_no_controls <- summary(model_no_controls)$coefficients["treat", 2]
# Model with demographic controls
formula_with_controls <- as.formula(paste(outcome_var, "~ treat +", paste(demographic_controls, collapse = " + ")))
model_with_controls <- lm(formula_with_controls, data = data)
est_diff_with_controls <- summary(model_with_controls)$coefficients["treat", 1]
se_with_controls <- summary(model_with_controls)$coefficients["treat", 2]
# Calculate the absolute difference between estimates (optional, for analysis)
est_diff_difference <- abs(est_diff_no_controls - est_diff_with_controls)
# Return results for both models, formatted as required
return(c(
variable = outcome_var,
diff_no_controls = paste0(round(est_diff_no_controls, 4), " (", round(se_no_controls, 4), ")"),
diff_with_controls = paste0(round(est_diff_with_controls, 4), " (", round(se_with_controls, 4), ")"),
est_diff_difference = est_diff_difference  # For interpretation
))
}
# Filter for the columns representing the first year following "0816" in the claims dataset
first_year_outcomes <- claims %>%
select(
"covg_0816_0717", "diabetes_0816_0717", "hyperlipidemia_0816_0717",
"hypertension_0816_0717", "nonzero_spend_0816_0717", "pcp_any_office_0816_0717",
"pcp_any_visits_0816_0717", "pcp_total_office_0816_0717", "pcp_total_visits_0816_0717",
"pos_er_critical_0816_0717", "pos_hospital_0816_0717", "pos_office_outpatient_0816_0717",
"spendHosp_0816_0717", "spendOff_0816_0717", "spendRx_0816_0717", "spend_0816_0717"
)
# Apply the function to each outcome variable and compile results
results <- as.data.frame(do.call(rbind, lapply(names(first_year_outcomes), function(var) {
calculate_differences(claims, var)
})))
# Convert est_diff_difference to numeric for further analysis
results$est_diff_difference <- as.numeric(results$est_diff_difference)
# Display the results table and calculate the average difference between columns (2) and (3)
print(results)
cat("Average absolute difference between estimates with and without controls:", mean(results$est_diff_difference), "\n")
# Load necessary libraries
library(dplyr)
# Assume that participation is indicated by non-missing values in the initial screening column
# Here, we use 'completed_screening_nomiss_2016' as a proxy for participation, creating a 'participant' column
claims <- claims %>%
mutate(participant = ifelse(!is.na(completed_screening_nomiss_2016) & completed_screening_nomiss_2016 == 1, 1, 0))
# Specify demographic controls
demographic_controls <- c("male", "white", "age37_49", "age50")
# Define a function to calculate estimated differences between participants and non-participants with and without demographic controls
calculate_participation_differences <- function(data, outcome_var) {
# Model without demographic controls
model_no_controls <- lm(as.formula(paste(outcome_var, "~ participant")), data = data)
est_diff_no_controls <- summary(model_no_controls)$coefficients["participant", 1]
se_no_controls <- summary(model_no_controls)$coefficients["participant", 2]
# Model with demographic controls
formula_with_controls <- as.formula(paste(outcome_var, "~ participant +", paste(demographic_controls, collapse = " + ")))
model_with_controls <- lm(formula_with_controls, data = data)
est_diff_with_controls <- summary(model_with_controls)$coefficients["participant", 1]
se_with_controls <- summary(model_with_controls)$coefficients["participant", 2]
# Calculate the absolute difference between estimates (optional, for analysis)
est_diff_difference <- abs(est_diff_no_controls - est_diff_with_controls)
# Return results for both models, formatted as required
return(c(
variable = outcome_var,
diff_no_controls = paste0(round(est_diff_no_controls, 4), " (", round(se_no_controls, 4), ")"),
diff_with_controls = paste0(round(est_diff_with_controls, 4), " (", round(se_with_controls, 4), ")"),
est_diff_difference = est_diff_difference  # For interpretation
))
}
# Filter for columns representing the first year following "0816" in the claims dataset
first_year_outcomes <- claims %>%
select(
"covg_0816_0717", "diabetes_0816_0717", "hyperlipidemia_0816_0717",
"hypertension_0816_0717", "nonzero_spend_0816_0717", "pcp_any_office_0816_0717",
"pcp_any_visits_0816_0717", "pcp_total_office_0816_0717", "pcp_total_visits_0816_0717",
"pos_er_critical_0816_0717", "pos_hospital_0816_0717", "pos_office_outpatient_0816_0717",
"spendHosp_0816_0717", "spendOff_0816_0717", "spendRx_0816_0717", "spend_0816_0717"
)
# Apply the function to each outcome variable and compile results
results <- as.data.frame(do.call(rbind, lapply(names(first_year_outcomes), function(var) {
calculate_participation_differences(claims, var)
})))
# Convert est_diff_difference to numeric for further analysis
results$est_diff_difference <- as.numeric(results$est_diff_difference)
# Display the results table and calculate the average difference between columns (2) and (3)
print(results)
cat("Average absolute difference between estimates with and without controls:", mean(results$est_diff_difference), "\n")
# Load necessary libraries
suppressPackageStartupMessages(library(dplyr))
library(haven)
# Load data
claims <- read_dta("https://reifjulian.github.io/illinois-wellness-data/data/stata/claims.dta")
# Define "treatment" and "control" groups from the claims dataset
# (assuming treat column: 1 = treatment group, 0 = control group)
treatment_group <- filter(claims, treat == 1)
control_group <- filter(claims, treat == 0)
# Count the number of employees in each group
n_treatment <- nrow(treatment_group)
n_control <- nrow(control_group)
# Identify employees in the treatment group who participated in the initial (first-year) screening
# Assuming the claims dataset includes a column `completed_screening_nomiss_2016` indicating 2016 screening participation
initial_screening <- filter(claims, treat == 1 & !is.na(completed_screening_nomiss_2016) & completed_screening_nomiss_2016 == 1)
n_participants_initial_screening <- nrow(initial_screening)
# Define explanations for treatment, control, and participant
treatment_definition <- "Treatment group: employees offered the wellness program"
control_definition <- "Control group: employees not offered the wellness program"
participant_definition <- "Participant: treatment group employee who took part in initial screening"
# Print results with explanations
list(
treatment_definition = treatment_definition,
control_definition = control_definition,
participant_definition = participant_definition,
treatment_group_count = n_treatment,
control_group_count = n_control,
initial_screening_participants = n_participants_initial_screening
)
# Load necessary library
library(dplyr)
# Filter the claims dataset for pre-randomization outcomes before "0716"
pre_randomization_outcomes <- claims %>%
select(contains("0715"), contains("0716"))
# Define a function to calculate control and treatment group means and p-values for each variable
calculate_means_pvalues <- function(data, outcome_var) {
# Fit a linear regression model with 'treat' as the independent variable
model <- lm(as.formula(paste(outcome_var, "~ treat")), data = data)
# Extract control group mean (intercept), treatment group mean (intercept + treat coefficient), and p-value
control_mean <- coef(model)[1]  # Intercept, representing control group mean
treatment_mean <- coef(model)[1] + coef(model)[2]  # Control mean + treat coefficient, representing treatment group mean
p_value <- summary(model)$coefficients[2, 4]  # p-value for the 'treat' coefficient
# Return a named vector with the variable name, control mean, treatment mean, and p-value
return(c(variable = outcome_var, control_mean = control_mean,
treatment_mean = treatment_mean, p_value = p_value))
}
# Apply the function to each pre-randomization variable and store the results in a table
results <- as.data.frame(do.call(rbind, lapply(names(pre_randomization_outcomes), function(var) {
calculate_means_pvalues(claims, var)
})))
# Convert p-value column to numeric for further calculations
results$p_value <- as.numeric(results$p_value)
# Calculate the proportion of variables with p-values less than 0.05
proportion_significant <- mean(results$p_value < 0.05)
# Display the results table and the proportion of significant p-values
print(results)
cat("Proportion of variables with p-values < 0.05:", proportion_significant)
# Load necessary libraries
library(dplyr)
# Specify demographic controls
demographic_controls <- c("male", "white", "age37_49", "age50")
# Define function to calculate estimated difference with and without demographic controls
calculate_differences <- function(data, outcome_var) {
# Model without demographic controls
model_no_controls <- lm(as.formula(paste(outcome_var, "~ treat")), data = data)
est_diff_no_controls <- summary(model_no_controls)$coefficients["treat", 1]
se_no_controls <- summary(model_no_controls)$coefficients["treat", 2]
# Model with demographic controls
formula_with_controls <- as.formula(paste(outcome_var, "~ treat +", paste(demographic_controls, collapse = " + ")))
model_with_controls <- lm(formula_with_controls, data = data)
est_diff_with_controls <- summary(model_with_controls)$coefficients["treat", 1]
se_with_controls <- summary(model_with_controls)$coefficients["treat", 2]
# Calculate the absolute difference between estimates (optional, for analysis)
est_diff_difference <- abs(est_diff_no_controls - est_diff_with_controls)
# Return results for both models, formatted as required
return(c(
variable = outcome_var,
diff_no_controls = paste0(round(est_diff_no_controls, 4), " (", round(se_no_controls, 4), ")"),
diff_with_controls = paste0(round(est_diff_with_controls, 4), " (", round(se_with_controls, 4), ")"),
est_diff_difference = est_diff_difference  # For interpretation
))
}
# Filter for first-year post-randomization outcomes in claims dataset
first_year_outcomes <- claims %>%
select(starts_with("spend_0816_0717"), starts_with("covg_0816_0717"), starts_with("diabetes_0816_0717"),
starts_with("hyperlipidemia_0816_0717"), starts_with("hypertension_0816_0717"),
starts_with("pcp_any_office_0816_0717"), starts_with("pcp_total_visits_0816_0717"))
# Apply function to each outcome variable and compile results
results <- as.data.frame(do.call(rbind, lapply(names(first_year_outcomes), function(var) {
calculate_differences(claims, var)
})))
# Convert est_diff_difference to numeric for further analysis
results$est_diff_difference <- as.numeric(results$est_diff_difference)
# Display the results table and calculate the average difference between columns (2) and (3)
print(results)
cat("Average absolute difference between estimates with and without controls:", mean(results$est_diff_difference), "\n")
# Load necessary libraries
library(dplyr)
# Specify demographic controls
demographic_controls <- c("male", "white", "age37_49", "age50")
# Define a function to calculate estimated differences with and without demographic controls
calculate_differences <- function(data, outcome_var) {
# Model without demographic controls
model_no_controls <- lm(as.formula(paste(outcome_var, "~ treat")), data = data)
est_diff_no_controls <- summary(model_no_controls)$coefficients["treat", 1]
se_no_controls <- summary(model_no_controls)$coefficients["treat", 2]
# Model with demographic controls
formula_with_controls <- as.formula(paste(outcome_var, "~ treat +", paste(demographic_controls, collapse = " + ")))
model_with_controls <- lm(formula_with_controls, data = data)
est_diff_with_controls <- summary(model_with_controls)$coefficients["treat", 1]
se_with_controls <- summary(model_with_controls)$coefficients["treat", 2]
# Calculate the absolute difference between estimates (optional, for analysis)
est_diff_difference <- abs(est_diff_no_controls - est_diff_with_controls)
# Return results for both models, formatted as required
return(c(
variable = outcome_var,
diff_no_controls = paste0(round(est_diff_no_controls, 4), " (", round(se_no_controls, 4), ")"),
diff_with_controls = paste0(round(est_diff_with_controls, 4), " (", round(se_with_controls, 4), ")"),
est_diff_difference = est_diff_difference  # For interpretation
))
}
# Filter for the columns representing the first year following "0816" in the claims dataset
first_year_outcomes <- claims %>%
select(
"covg_0816_0717", "diabetes_0816_0717", "hyperlipidemia_0816_0717",
"hypertension_0816_0717", "nonzero_spend_0816_0717", "pcp_any_office_0816_0717",
"pcp_any_visits_0816_0717", "pcp_total_office_0816_0717", "pcp_total_visits_0816_0717",
"pos_er_critical_0816_0717", "pos_hospital_0816_0717", "pos_office_outpatient_0816_0717",
"spendHosp_0816_0717", "spendOff_0816_0717", "spendRx_0816_0717", "spend_0816_0717"
)
# Apply the function to each outcome variable and compile results
results <- as.data.frame(do.call(rbind, lapply(names(first_year_outcomes), function(var) {
calculate_differences(claims, var)
})))
# Convert est_diff_difference to numeric for further analysis
results$est_diff_difference <- as.numeric(results$est_diff_difference)
# Display the results table and calculate the average difference between columns (2) and (3)
print(results)
cat("Average absolute difference between estimates with and without controls:", mean(results$est_diff_difference), "\n")
# Load necessary libraries
library(dplyr)
# Assume that participation is indicated by non-missing values in the initial screening column
# Here, we use 'completed_screening_nomiss_2016' as a proxy for participation, creating a 'participant' column
claims <- claims %>%
mutate(participant = ifelse(!is.na(completed_screening_nomiss_2016) & completed_screening_nomiss_2016 == 1, 1, 0))
# Specify demographic controls
demographic_controls <- c("male", "white", "age37_49", "age50")
# Define a function to calculate estimated differences between participants and non-participants with and without demographic controls
calculate_participation_differences <- function(data, outcome_var) {
# Model without demographic controls
model_no_controls <- lm(as.formula(paste(outcome_var, "~ participant")), data = data)
est_diff_no_controls <- summary(model_no_controls)$coefficients["participant", 1]
se_no_controls <- summary(model_no_controls)$coefficients["participant", 2]
# Model with demographic controls
formula_with_controls <- as.formula(paste(outcome_var, "~ participant +", paste(demographic_controls, collapse = " + ")))
model_with_controls <- lm(formula_with_controls, data = data)
est_diff_with_controls <- summary(model_with_controls)$coefficients["participant", 1]
se_with_controls <- summary(model_with_controls)$coefficients["participant", 2]
# Calculate the absolute difference between estimates (optional, for analysis)
est_diff_difference <- abs(est_diff_no_controls - est_diff_with_controls)
# Return results for both models, formatted as required
return(c(
variable = outcome_var,
diff_no_controls = paste0(round(est_diff_no_controls, 4), " (", round(se_no_controls, 4), ")"),
diff_with_controls = paste0(round(est_diff_with_controls, 4), " (", round(se_with_controls, 4), ")"),
est_diff_difference = est_diff_difference  # For interpretation
))
}
# Filter for columns representing the first year following "0816" in the claims dataset
first_year_outcomes <- claims %>%
select(
"covg_0816_0717", "diabetes_0816_0717", "hyperlipidemia_0816_0717",
"hypertension_0816_0717", "nonzero_spend_0816_0717", "pcp_any_office_0816_0717",
"pcp_any_visits_0816_0717", "pcp_total_office_0816_0717", "pcp_total_visits_0816_0717",
"pos_er_critical_0816_0717", "pos_hospital_0816_0717", "pos_office_outpatient_0816_0717",
"spendHosp_0816_0717", "spendOff_0816_0717", "spendRx_0816_0717", "spend_0816_0717"
)
# Apply the function to each outcome variable and compile results
results <- as.data.frame(do.call(rbind, lapply(names(first_year_outcomes), function(var) {
calculate_participation_differences(claims, var)
})))
# Convert est_diff_difference to numeric for further analysis
results$est_diff_difference <- as.numeric(results$est_diff_difference)
# Display the results table and calculate the average difference between columns (2) and (3)
print(results)
cat("Average absolute difference between estimates with and without controls:", mean(results$est_diff_difference), "\n")
