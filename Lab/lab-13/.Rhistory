library(tidyverse)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(tidyverse)
library(rpart)
library(rpart.plot)
library(caret)
library(ggplot2)
# Load dataset
bank.df <- read_csv("'/Users/iveshe/Library/Mobile Documents/com~apple~CloudDocs/Term 1/FIN 550/Lab/lab-13/UniversalBank.csv'")
# Load dataset
bank.df <- read_csv("/Users/iveshe/Library/Mobile Documents/com~apple~CloudDocs/Term 1/FIN 550/Lab/lab-13/UniversalBank.csv")
names(bank.df) <- gsub(" ", ".", names(bank.df))
# drop ID and zip code columns
bank.df <- bank.df %>% select(-ID, -ZIP.Code)
# convert numeric variables to categorical variables
bank.df$Personal.Loan <- as.factor(bank.df$Personal.Loan)
bank.df$Education <- as.factor(bank.df$Education)
str(bank.df)
# Build the tree
set.seed(1)
bank.tree <- rpart(Personal.Loan ~ ., data = bank.df, method = "class", cp = 0)
# Number of leaves
num_leaves <- sum(bank.tree$frame$var == "<leaf>")
print(paste("Number of leaves in the tree:", num_leaves))
prp(bank.tree, type = 1, extra = 1, under = TRUE, varlen = -10)
plot(bank.tree)
text(bank.tree, pretty = 0)
cv.results <- printcp(bank.tree)
# Minimum CV MSE
min_cv_mse <- min(cv.results$cptable[, "xerror"])
cp.table <- bank.tree$cptable
# Minimum CV MSE
min_cv_mse <- min(cp.table[, "xerror"])
print(paste("Minimum CV MSE:", min_cv_mse))
# Optimal alpha
optimal_alpha <- cp.table[which.min(cp.table[, "xerror"]), "CP"]
print(paste("Optimal alpha:", optimal_alpha))
# Prune tree
pruned.tree <- prune(bank.tree, cp = optimal_alpha)
# Pruned tree plot
prp(pruned.tree, type = 1, extra = 1, under = TRUE, varlen = -10)
# Number of leaves
num_leaves_pruned <- sum(pruned.tree$frame$var == "<leaf>")
print(paste("Number of leaves in the pruned tree:", num_leaves_pruned))
# Prediction
set.seed(1)
yhat.tree <- predict(pruned.tree, bank.df, type = "class")
print(paste("Number of predictions:", length(yhat.tree)))
print(paste("Number of observations:", nrow(bank.df)))
# Confusion Matrix
cm.tree <- confusionMatrix(yhat.tree, bank.df$Personal.Loan)
print(cm.tree)
# Logistic regression
logit <- glm(Personal.Loan ~ ., data = bank.df, family = binomial)
# Logistic predictions
yhat.logit.prob <- predict(logit, bank.df, type = "response")
yhat.logit <- as.factor(ifelse(yhat.logit.prob > 0.5, 1, 0))
cm.logit <- confusionMatrix(yhat.logit, bank.df$Personal.Loan)
print(cm.logit)
# Logit confusion matrix
cm.logit <- confusionMatrix(yhat.logit, bank.df$Personal.Loan)
print(cm.logit)
library(tidyverse)
library(rpart)
library(rpart.plot)
library(caret)
library(ggplot2)
# Load dataset
bank.df <- read_csv("/Users/iveshe/Library/Mobile Documents/com~apple~CloudDocs/Term 1/FIN 550/Lab/lab-13/UniversalBank.csv")
names(bank.df) <- gsub(" ", ".", names(bank.df))
# drop ID and zip code columns
bank.df <- bank.df %>% select(-ID, -ZIP.Code)
# convert numeric variables to categorical variables
bank.df$Personal.Loan <- as.factor(bank.df$Personal.Loan)
bank.df$Education <- as.factor(bank.df$Education)
str(bank.df)
# Build the tree
set.seed(1)
bank.tree <- rpart(Personal.Loan ~ ., data = bank.df, method = "class", cp = 0)
# Number of leaves
num_leaves <- sum(bank.tree$frame$var == "<leaf>")
print(paste("Number of leaves in the tree:", num_leaves))
prp(bank.tree, type = 1, extra = 1, under = TRUE, varlen = -10)
plot(bank.tree)
text(bank.tree, pretty = 0)
cp.table <- bank.tree$cptable
# Minimum CV MSE
min_cv_mse <- min(cp.table[, "xerror"])
print(paste("Minimum CV MSE:", min_cv_mse))
# Optimal alpha
optimal_alpha <- cp.table[which.min(cp.table[, "xerror"]), "CP"]
print(paste("Optimal alpha:", optimal_alpha))
# Prune tree
pruned.tree <- prune(bank.tree, cp = optimal_alpha)
# Pruned tree plot
prp(pruned.tree, type = 1, extra = 1, under = TRUE, varlen = -10)
# Number of leaves
num_leaves_pruned <- sum(pruned.tree$frame$var == "<leaf>")
print(paste("Number of leaves in the pruned tree:", num_leaves_pruned))
# Prediction
set.seed(1)
yhat.tree <- predict(pruned.tree, bank.df, type = "class")
print(paste("Number of predictions:", length(yhat.tree)))
print(paste("Number of observations:", nrow(bank.df)))
# Confusion Matrix
cm.tree <- confusionMatrix(yhat.tree, bank.df$Personal.Loan)
print(cm.tree)
# Logistic regression
logit <- glm(Personal.Loan ~ ., data = bank.df, family = binomial)
# Logistic predictions
yhat.logit.prob <- predict(logit, bank.df, type = "response")
yhat.logit <- as.factor(ifelse(yhat.logit.prob > 0.5, 1, 0))
# Logit confusion matrix
cm.logit <- confusionMatrix(yhat.logit, bank.df$Personal.Loan)
print(cm.logit)
par(mar = c(5, 4, 4, 4))
plot(bank.tree, uniform = TRUE, main = "Classification Tree for Personal Loan")
text(bank.tree, use.n = TRUE, all = TRUE, cex = 0.8, xpd = TRUE)
prp(bank.tree,
type = 2,          # Draws the split labels at the node instead of in the branches
extra = 104,       # Displays both class prediction and probability
under = TRUE,      # Adds the number of observations under each node
cex = 0.7,         # Decreases the size of the text for readability
varlen = 0,        # No truncation of variable names
faclen = 0,        # No truncation of factor labels
box.palette = "auto", # Adds color to make it more readable
fallen.leaves = TRUE) # Place leaf nodes at the bottom of the plot
prp(bank.tree,
type = 2,             # Labels at nodes instead of branches
extra = 104,          # Shows class prediction and probability
under = TRUE,         # Adds number of observations under each node
cex = 0.6,            # Decrease text size further
varlen = 0,           # No truncation of variable names
faclen = 0,           # No truncation of factor labels
box.palette = "Blues",# Use a color palette to differentiate nodes
shadow.col = "gray",  # Adds a shadow to each node for better visualization
space = 0.2,          # Adds more space between nodes
tweak = 1.1,          # Slightly adjust the layout to make nodes more readable
fallen.leaves = TRUE) # Place leaf nodes at the bottom of the plot
prp(bank.tree,
type = 2,                # Labels at nodes instead of branches
extra = 104,             # Shows class prediction and probability
under = TRUE,            # Adds number of observations under each node
cex = 0.5,               # Further decrease text size to prevent overlaps
varlen = 0,              # No truncation of variable names
faclen = 0,              # No truncation of factor labels
box.palette = "GnBu",    # Use a high-contrast color palette to differentiate nodes
shadow.col = NULL,       # No shadows to reduce clutter
space = 0.3,             # More space between nodes to prevent text collision
clip.right.labs = FALSE, # Avoid clipping of labels on the right side
fallen.leaves = FALSE,   # Better alignment of leaves for easier reading
main = "Pruned Classification Tree for Personal Loan") # Updated title for context
prp(bank.tree,
type = 2,                # Labels at nodes instead of branches
extra = 104,             # Shows class prediction and probability
under = TRUE,            # Adds number of observations under each node
cex = 0.7,               # Slightly increased text size
varlen = 0,              # No truncation of variable names
faclen = 0,              # No truncation of factor labels
box.palette = "GnBu",    # Use a high-contrast color palette to differentiate nodes
shadow.col = NULL,       # No shadows to reduce clutter
space = 0.2,             # Adjust space between nodes to minimize overlap
clip.right.labs = FALSE, # Avoid clipping of labels on the right side
fallen.leaves = FALSE,   # Better alignment of leaves for easier reading
main = "Pruned Classification Tree for Personal Loan") # Updated title for context
# Increase the margins around the plot for better spacing
par(mar = c(5, 4, 4, 2) + 0.1)
# Plot the classification tree with better spacing
plot(bank.tree, uniform = TRUE, main = "Classification Tree for Personal Loan", compress = TRUE, margin = 0.1)
# Add text to the plot with adjusted parameters for better readability
text(bank.tree, use.n = TRUE, all = TRUE, cex = 0.7, pretty = 0)
# Set larger plot margins to give more space
par(mar = c(5, 4, 4, 6) + 0.1)
# Plot the classification tree
plot(bank.tree, uniform = TRUE, main = "Classification Tree for Personal Loan", compress = TRUE, margin = 0.2)
# Add text to the plot with improved readability settings
text(bank.tree, use.n = TRUE, all = TRUE, cex = 0.6, pretty = 1, xpd = TRUE)
# Set larger plot margins to give more space
par(mar = c(6, 4, 4, 8) + 0.1)
# Plot the classification tree with increased spacing between branches
plot(bank.tree, uniform = TRUE, main = "Classification Tree for Personal Loan", compress = FALSE, margin = 0.3, minbranch = 0.6)
# Add text to the plot with improved readability settings
text(bank.tree, use.n = TRUE, all = TRUE, cex = 0.6, pretty = 1, xpd = TRUE)
# Set larger plot margins to give more space
par(mar = c(6, 4, 4, 6) + 0.1)
# Plot the classification tree with increased horizontal space
plot(bank.tree, uniform = TRUE, main = "Classification Tree for Personal Loan", compress = FALSE, margin = 0.4, minbranch = 1.0, xlim = c(0, 1.5))
# Add text to the plot with improved readability settings
text(bank.tree, use.n = TRUE, all = TRUE, cex = 0.6, pretty = 1, xpd = TRUE)
# Set larger plot margins to give more space
par(mar = c(6, 4, 4, 6) + 0.1)
# Plot the classification tree with reduced horizontal expansion
plot(bank.tree, uniform = TRUE, main = "Classification Tree for Personal Loan", compress = TRUE, margin = 0.2, minbranch = 0.8, xlim = c(0, 1))
# Add text to the plot with improved readability settings
text(bank.tree, use.n = TRUE, all = TRUE, cex = 0.6, pretty = 1, xpd = TRUE)
# Increase the margins around the plot for better spacing
par(mar = c(5, 4, 4, 2) + 0.1)
# Plot the classification tree with better spacing
plot(bank.tree, uniform = TRUE, main = "Classification Tree for Personal Loan", compress = TRUE, margin = 0.1)
# Add text to the plot with adjusted parameters for better readability
text(bank.tree, use.n = TRUE, all = TRUE, cex = 0.7, pretty = 0)
# 增加图的边距
par(mar = c(5, 4, 4, 2) + 0.1)
# 绘制分类树并增加树枝横向长度
plot(bank.tree, uniform = TRUE, main = "Classification Tree for Personal Loan", compress = FALSE, margin = 0.2)
# 增加文本，使其更易读
text(bank.tree, use.n = TRUE, all = TRUE, cex = 0.7, pretty = 0)
# Increase the margins around the plot for better spacing
par(mar = c(5, 4, 4, 2) + 0.1)
# Plot the classification tree with better spacing
plot(bank.tree, uniform = TRUE, main = "Classification Tree for Personal Loan", compress = TRUE, margin = 0.1)
# Add text to the plot with adjusted parameters for better readability
text(bank.tree, use.n = TRUE, all = TRUE, cex = 0.3, pretty = 0)
# Increase the margins around the plot for better spacing
par(mar = c(5, 4, 4, 2) + 0.1)
# Plot the classification tree with better spacing
plot(bank.tree, uniform = TRUE, main = "Classification Tree for Personal Loan", compress = TRUE, margin = 0.1)
# Add text to the plot with adjusted parameters for better readability
text(bank.tree, use.n = TRUE, all = TRUE, cex = 0.5, pretty = 0)
# Increase the margins around the plot for better spacing
par(mar = c(5, 4, 4, 2) + 0.1)
# Plot the classification tree with better spacing
plot(bank.tree, uniform = TRUE, main = "Classification Tree for Personal Loan", compress = TRUE, margin = 0.1)
# Add text to the plot with adjusted parameters for better readability
text(bank.tree, use.n = TRUE, all = TRUE, cex = 0.4, pretty = 0)
